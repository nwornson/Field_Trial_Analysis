out = anova(m) %>%
tidy() %>%
mutate(across(where(is.numeric),round,4))
return(out)
}
# Dunnett's test for multiple comparisons (to control)
display_dunnet = function(data,trial){
trial_data = data %>%
filter(Trial == trial)
dt = DunnettTest(CBuild.ratio ~ Treatment,
data = trial_data,
control = 'Control')
dt_df = data.frame(dt[1])
colnames(dt_df) = c('diff','lwr.ci','upr.ci','pval')
dt_df$trt = row.names(dt_df)
dt_df = dt_df %>%
separate(trt,c('Treatment.Name','ctrl'),sep = '-') %>%
relocate(Treatment.Name, .before = diff)
dt_df = dt_df %>% select(-ctrl)
row.names(dt_df) = NULL
out = dt_df %>%
#tidy() %>%
mutate(across(where(is.numeric),round,4))
return(out)
}
## Mixed effects model
ME_model_trt = function(data,trial){
tempdf = tempdf = data %>%
filter(Trial == trial)
model1 = lmer(baseline ~ Treatment + (1|Range) + (1|Row),tempdf)
m1.sum = anova(model1) %>%
tidy()
return(m1.sum)
}
## field variation
library(lme4)
field_var_BLTOC = function(data,trial) {
tempdf = data %>%
filter(Trial == trial)
resp_mean = mean(tempdf$baseline)
model1 = lmer(baseline ~ Treatment + (1|Range) + (1|Row),tempdf)
m1.sum = summary(model1)
sigma1 = m1.sum$sigma
cv1 = sigma1/resp_mean
sigma_range = m1.sum$varcor$Range[1]
sigma_row = m1.sum$varcor$Row[1]
# compute field variation by taking rg and row variation as a fraction of sum
total_var = sum(sigma_range,sigma_row,sigma1^2)
range_fv = sigma_range/total_var
row_fv = sigma_row/total_var
out = paste(round(cbind(sigma1,range_fv,row_fv,cv1),5) * 100,'%',sep = '')
out = data.frame(out,
row.names = c('Residual','Range','Row','Coeficient of Variation'))
colnames(out) = 'Value'
}
field_var_HTOC = function(data,trial) {
tempdf = data %>%
filter(Trial == trial)
resp_mean = mean(tempdf$harvest)
model1 = lmer(harvest ~ Treatment + (1|Range) + (1|Row),tempdf)
m1.sum = summary(model1)
sigma1 = m1.sum$sigma
cv1 = sigma1/resp_mean
sigma_range = m1.sum$varcor$Range[1]
sigma_row = m1.sum$varcor$Row[1]
# compute field variation by taking rg and row variation as a fraction of sum
total_var = sum(sigma_range,sigma_row,sigma1^2)
range_fv = sigma_range/total_var
row_fv = sigma_row/total_var
out = paste(round(cbind(sigma1,range_fv,row_fv,cv1),5) * 100,'%',sep = '')
out = data.frame(out,
row.names = c('Residual','Range','Row','Coeficient of Variation'))
colnames(out) = 'Value'
return(out)
}
#### Plotting functions
# Treatment locations
trt_heat = function(data,trial){
p = data  %>%
filter(Trial == trial) %>%
ggplot(aes(x = Row, y = Range)) +
geom_tile(color = 'black',fill = 'white') +
geom_text(aes(label = Treatment), color = "black", size = 3) +
theme_classic()
return(p)
}
# Baseline Heatmap
BL_heat = function(data,trial){
p = data  %>%
filter(Trial == trial) %>%
ggplot(aes(x = Row, y = Range, fill = baseline)) +
geom_tile() +
scale_fill_gradient(low="palevioletred",high="palegreen") +
#limits = c(lwr,upr))+
geom_text(aes(label = baseline), color = "black", size = 3)
#angle = 90)
return(p)
}
#Harvest Heatmap
H_heat = function(data,trial){
p = data  %>%
filter(Trial == trial) %>%
ggplot(aes(x = Row, y = Range, fill = harvest)) +
geom_tile() +
scale_fill_gradient(low="palevioletred",high="palegreen") +
#limits = c(lwr,upr))+
geom_text(aes(label = harvest), color = "black", size = 3)
#angle = 90)
return(p)
}
# Win-Rate by Treatment
WR_bar = function(data,trt){
boundry = .5
offset = .15
max.tc = max(abs(data$CBuild.diff))
if(max.tc + offset > boundry){
boundry = max.tc + offset
}
boundry = 100 * boundry
temp = data %>% filter(Treatment == trt) %>%
select(Trial,CBuild.diff,SE.CBuild.diff) %>%
mutate(WR = ifelse(CBuild.diff >= 0,1,0)) %>%
arrange(desc(-CBuild.diff))
locs = levels(factor(temp$Trial,level=factor(temp$Trial)))
top = boundry - 5
top2 = top - 20
mean_build = round(mean(temp$CBuild.diff),3)
WR = sum(temp$WR)/nrow(temp)
anno = data.frame(x = locs[1],y = c(top,top2),
label = c(paste('Avg', label_percent()(mean_build)),
paste('WR', label_percent()(WR))))
# convert to %
temp$CBuild.diff.perc = 100 * temp$CBuild.diff
temp$SE.CBuild.diff.perc = 100 * temp$SE.CBuild.diff
p = temp %>%
ggplot(aes(x = factor(Trial,level = Trial),
y = CBuild.diff.perc)) +
geom_bar(stat = 'identity',fill = 'aquamarine3') +
geom_errorbar(aes(x = factor(Trial, level=Trial),
ymin = CBuild.diff.perc - SE.CBuild.diff.perc, ymax = CBuild.diff.perc + SE.CBuild.diff.perc),
width = .25) +
geom_hline(yintercept = 0) +
xlab('') + ylab('TC H/B diff from Control (%)') +
ylim(-boundry,boundry) +
geom_text(data=anno,aes(x=x,y=y,label=label)) +
#geom_text(vjust = -2,
#          position = position_dodge(.9),size = 5) +
ggtitle(paste('TC diff from Control - ',trt)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
return(p)
}
## Distributions
# box plot
trial_box = function(data,trial){
p = data %>%
filter(Trial == trial) %>%
ggplot(aes(Treatment,CBuild.ratio)) +
geom_boxplot() +
geom_point() +
theme_classic()
return(p)
}
# testing
test = field_data()
t1 = L1_stats(test)
write.csv(test,'sample_data.csv',row.names = FALSE)
write.csv(t1,'sample_data_L1.csv',row.names = FALSE)
# atest = display_anova(test,'Location 1')
# pwr = WR_bar(t1,'Treatment a')
#
# print(pwr)
library(shiny)
library(tidyverse)
library(DT)
# uncomment this if running locally
direc = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(direc))
# functions
source('app_functions.R')
df = field_data()
df_L1 = L1_stats(df)
# Define UI
ui <- fluidPage(
# Application title
titlePanel("Field Trial Analysis"),
# panels
tabsetPanel(
tabPanel("Heatmaps",
fluidRow(
column(4,
selectInput("Trial","Trial",
unique(as.character(df$Trial)))
)),
plotOutput('trt_Heat'),
plotOutput('BL_Heat'),
plotOutput('H_Heat')
),
tabPanel(title = 'Win Rates',
fluidRow(
column(4,
selectInput("Treatment","Treatment",
unique(as.character(df$Treatment[df$Treatment!= 'Control'])))
)),
plotOutput('WR_trt')
),
tabPanel("Summary",
fluidRow(
column(4,
selectInput("Trial","Trial",
unique(as.character(df$Trial)))
)),
dataTableOutput('Summaries')
),
tabPanel("Distributions",
fluidRow(
column(4,
selectInput("Trial","Trial",
unique(as.character(df$Trial)))
)),
plotOutput('trial_box_plot')
),
tabPanel("Analysis",
fluidRow(
column(4,
selectInput("Trial","Trial",
unique(as.character(df$Trial)))
)),
dataTableOutput('anova'),
dataTableOutput('dunnet'),
dataTableOutput('field_var_BL'),
dataTableOutput('field_var_H')
)
),
)
# Define server logic
server <- function(input, output) {
output$trt_Heat = renderPlot({
trt_heat(df,input$Trial)
})
output$BL_Heat = renderPlot({
BL_heat(df,input$Trial)
})
output$H_Heat = renderPlot({
H_heat(df,input$Trial)
})
output$WR_trt = renderPlot({
WR_bar(df_L1,input$Treatment)
})
output$Summaries = renderDataTable(datatable({
display_stats(df,input$Trial)},
options = list(dom = 't')
))
output$anova = renderDataTable(datatable({
display_anova(df,input$Trial)},
caption = 'Fixed Effect Anova',
options = list(dom = 't')
))
output$trial_box_plot = renderPlot({
trial_box(df,input$Trial)
})
output$dunnet = renderDataTable(datatable({
display_dunnet(df,input$Trial)},
caption = 'Dunnets Test',
options = list(dom = 't')
))
output$field_var_B = renderDataTable(datatable({
field_var_BLTOC(df,input$Trial)},
caption = 'Field Variation - Baseline Sampling',
options = list(dom = 't')
))
output$field_var_H = renderDataTable(datatable({
field_var_HTOC(df,input$Trial)},
caption = 'Field Variation - Harvest Sampling',
options = list(dom = 't')
))
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(DT)
# uncomment this if running locally
direc = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(direc))
# functions
source('app_functions.R')
df = field_data()
df_L1 = L1_stats(df)
# Define UI
ui <- fluidPage(
# Application title
titlePanel("Field Trial Analysis"),
# panels
tabsetPanel(
tabPanel("Heatmaps",
fluidRow(
column(4,
selectInput("Trial","Trial",
unique(as.character(df$Trial)))
)),
plotOutput('trt_Heat'),
plotOutput('BL_Heat'),
plotOutput('H_Heat')
),
tabPanel(title = 'Win Rates',
fluidRow(
column(4,
selectInput("Treatment","Treatment",
unique(as.character(df$Treatment[df$Treatment!= 'Control'])))
)),
plotOutput('WR_trt')
),
tabPanel("Summary",
fluidRow(
column(4,
selectInput("Trial","Trial",
unique(as.character(df$Trial)))
)),
dataTableOutput('Summaries')
),
tabPanel("Distributions",
fluidRow(
column(4,
selectInput("Trial","Trial",
unique(as.character(df$Trial)))
)),
plotOutput('trial_box_plot')
),
tabPanel("Analysis",
fluidRow(
column(4,
selectInput("Trial","Trial",
unique(as.character(df$Trial)))
)),
dataTableOutput('anova'),
dataTableOutput('dunnet'),
dataTableOutput('field_var_BL'),
dataTableOutput('field_var_H')
)
),
)
# Define server logic
server <- function(input, output) {
output$trt_Heat = renderPlot({
trt_heat(df,input$Trial)
})
output$BL_Heat = renderPlot({
BL_heat(df,input$Trial)
})
output$H_Heat = renderPlot({
H_heat(df,input$Trial)
})
output$WR_trt = renderPlot({
WR_bar(df_L1,input$Treatment)
})
output$Summaries = renderDataTable(datatable({
display_stats(df,input$Trial)},
options = list(dom = 't')
))
output$anova = renderDataTable(datatable({
display_anova(df,input$Trial)},
caption = 'Fixed Effect Anova',
options = list(dom = 't')
))
output$trial_box_plot = renderPlot({
trial_box(df,input$Trial)
})
output$dunnet = renderDataTable(datatable({
display_dunnet(df,input$Trial)},
caption = 'Dunnets Test',
options = list(dom = 't')
))
output$field_var_B = renderDataTable(datatable({
field_var_BLTOC(df,input$Trial)},
caption = 'Field Variation - Baseline Sampling',
options = list(dom = 't')
))
output$field_var_H = renderDataTable(datatable({
field_var_HTOC(df,input$Trial)},
caption = 'Field Variation - Harvest Sampling',
options = list(dom = 't')
))
}
# Run the application
shinyApp(ui = ui, server = server)
pwr = WR_bar(t1,'Treatment a')
#
print(pwr)
library(shiny)
library(tidyverse)
library(DT)
# uncomment this if running locally
direc = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(direc))
# functions
source('app_functions.R')
df = field_data()
df_L1 = L1_stats(df)
# Define UI
ui <- fluidPage(
# Application title
titlePanel("Field Trial Analysis"),
# panels
tabsetPanel(
tabPanel("Heatmaps",
fluidRow(
column(4,
selectInput("Trial","Trial",
unique(as.character(df$Trial)))
)),
plotOutput('trt_Heat'),
plotOutput('BL_Heat'),
plotOutput('H_Heat')
),
tabPanel(title = 'Win Rates',
fluidRow(
column(4,
selectInput("Treatment","Treatment",
unique(as.character(df$Treatment[df$Treatment!= 'Control'])))
)),
plotOutput('WR_trt')
),
tabPanel("Summary",
fluidRow(
column(4,
selectInput("Trial","Trial",
unique(as.character(df$Trial)))
)),
dataTableOutput('Summaries')
),
tabPanel("Distributions",
fluidRow(
column(4,
selectInput("Trial","Trial",
unique(as.character(df$Trial)))
)),
plotOutput('trial_box_plot')
),
tabPanel("Analysis",
fluidRow(
column(4,
selectInput("Trial","Trial",
unique(as.character(df$Trial)))
)),
dataTableOutput('anova'),
dataTableOutput('dunnet'),
dataTableOutput('field_var_BL'),
dataTableOutput('field_var_H')
)
),
)
# Define server logic
server <- function(input, output) {
output$trt_Heat = renderPlot({
trt_heat(df,input$Trial)
})
output$BL_Heat = renderPlot({
BL_heat(df,input$Trial)
})
output$H_Heat = renderPlot({
H_heat(df,input$Trial)
})
output$WR_trt = renderPlot({
WR_bar(df_L1,input$Treatment)
})
output$Summaries = renderDataTable(datatable({
display_stats(df,input$Trial)},
options = list(dom = 't')
))
output$anova = renderDataTable(datatable({
display_anova(df,input$Trial)},
caption = 'Fixed Effect Anova',
options = list(dom = 't')
))
output$trial_box_plot = renderPlot({
trial_box(df,input$Trial)
})
output$dunnet = renderDataTable(datatable({
display_dunnet(df,input$Trial)},
caption = 'Dunnets Test',
options = list(dom = 't')
))
output$field_var_B = renderDataTable(datatable({
field_var_BLTOC(df,input$Trial)},
caption = 'Field Variation - Baseline Sampling',
options = list(dom = 't')
))
output$field_var_H = renderDataTable(datatable({
field_var_HTOC(df,input$Trial)},
caption = 'Field Variation - Harvest Sampling',
options = list(dom = 't')
))
}
# Run the application
shinyApp(ui = ui, server = server)
test
t1 = test %>%
filter(Treatment == 'Treatment b')
t1
t1 = test %>%
filter(Treatment == 'Treatment b',
Trial == 'Location 1')
t1
colnames(t1)
avg_bl = mean(t1$baseline)
avg_H = mean(t1$baseline)
avg_H/avg_bl
mean(t1$CBuild.ratio)
avg_H = mean(t1$harvest)
avg_H/avg_bl
mean(t1$CBuild.ratio)
